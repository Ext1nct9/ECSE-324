//Input Image: 
// **each word contains 1 byte dedicated to each channel**

input_image: .word 1057442138,  2410420899, 519339369,  2908788659, 1532551093, 4249151175, 4148718620, 788746931,  3777110853, 2023451652
.word 3000595192,   1424215634, 3130581119, 3415585405, 2359913843, 1600975764, 1368061213, 2330908780, 3460755284, 464067332
.word 2358850436,   1191202723, 2461113486, 3373356749, 3070515869, 4219460496, 1464115644, 3200205016, 1316921258, 143509283
.word 3846979011,   2393794600, 618297079,  2016233561, 3509496510, 1966263545, 568123240,  4091698540, 2472059715, 2420085477
.word 395970857,    2217766702, 44993357,   694287440,  2233438483, 1231031852, 2612978931, 1464238350, 3373257252, 2418760426
.word 4005861356,   288491815, 3533591053,  754133199,  3745088714, 2711399263, 2291899825, 2117953337, 1710526325, 1989628126
.word 465096977,    3100163617, 195551247,  3884399959, 422483884,  2154571543, 3380017320, 380355875,  4161422042, 654077379
.word 2168260534,   3266157063, 3870711524, 2809320128, 3980588369, 2342816349, 1283915395, 122534782,  4270863000, 2232709752
.word 1946888581,   1956399250, 3892336886, 1456853217, 3602595147, 1756931089, 858680934,  2326906362, 2258756188, 1125912976
.word 1883735002,   1851212965, 3925218056, 2270198189, 3481512846, 1685364533, 1411965810, 3850049461, 3023321890, 2815055881
n: .word 100

// Output Image: 

//2358604415, 2237763982, 2237768078, 2321588624, 2354619251, 2321588588
//2358800255, 2238481533, 2290785678, 2288819581, 2322375027, 2122293612
//2240245593, 2220979801, 2239141776, 2237763984, 2288033168, 2155781520
//2240250961, 2238876241, 2240190312, 2154601832, 2288033132, 2239139704
//2224718929, 2241628752, 2290585951, 2155257183, 2255918943, 2156300920
//2810673554, 2711389277, 2340853618, 2273025918, 2289802610, 2156300917

.global _start

_start:
arraycopy: .space 100
result: .space 144
push {r4-r12}
ldr r0, =input_image //pointer for array
ldr r1, =n
ldr r1, [r1]		//Value of size
ldr r4, =arraycopy	//pointer for arraycopy
mov r2, #0
add r2, r2, r1, LSR #2	// value of size in bits
mov r5, #4			
mov r6, #5		// Add5 comparison
mov r7, #0			// Counter 
mov r9, #0
add r9, r9, r1, LSR #2
ldr r10, =input_image
bl copyarray
bl insertionsort1
pop {r4-r12}


stop:
b stop

insertionsort1:
push {r4-r12, lr}
mov r5, #0
cmp r9, #1
ble exit		
sub r9, r9, #1
bl insertionsort
add r5, r4, r9, LSL #2
b innerloop

innerloop:
ldr r11, [r5], #-4
ldr r12, [r5] 
cmp r11,r12
bge exit
mov r6, r12
str r11, [r5], #4
str r6, [r5], #-4
cmp r5, r4
bgt innerloop
b exit

exit: 
mov r8, #0
pop {r4-r12, lr}
bx lr

copyarray:
push {r4-r12}
b copy

copy:
ldr r8, [r10], #4
str r8, [r4], #4
add r7, r7, #1
cmp r7, r6
beq add5
cmp r7, r9
beq end
b copy

add5:
cmp r7, r9
beq end
add r10, r10, #20
add r6, r6, #5
b copy

end: 
pop {r4-r12}
bx lr

.end
	
	